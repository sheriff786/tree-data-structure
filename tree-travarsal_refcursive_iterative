
# Structure of a Binary Tree Node
# Stores the answer 
ans = [] 
class Node:
	def __init__(self, v):
		self.data = v
		self.left = None
		self.right = None

# Function to print inorder traversal
def printInorder(node):
	if node is None:
		return

	# First recur on left subtree
	printInorder(node.left)

	# Now deal with the node
	print(node.data, end=' ')

	# Then recur on right subtree
	printInorder(node.right)
	
# Iterative function for inorder tree traversal
def inOrder(root):
     
    # Set current to root of binary tree
    current = root
     
    # Initialize stack
    stack = []
     
    while True:
         
        # Reach the left most Node of the current Node
        if current is not None:
             
            # Place pointer to a tree node on the stack 
            # before traversing the node's left subtree
            stack.append(current)
         
            current = current.left
         
        # BackTrack from the empty subtree and visit the Node
        # at the top of the stack; however, if the stack is 
        # empty you are done
        elif(stack):
            current = stack.pop()
            print(current.data, end=" ")
         
            # We have visited the node and its left 
            # subtree. Now, it's right subtree's turn
            current = current.right 
 
        else:
            break
     
    print()
# Function to print preorder traversal
def preOrder(root):
     
    # Base CAse 
    if root is None:
        return 

    # create an empty stack and push root to it
    nodeStack = []
    nodeStack.append(root)

    # Pop all items one by one. Do following for every popped item
    # a) print it
    # b) push its right child
    # c) push its left child
    # Note that right child is pushed first so that left
    # is processed first */
    while(len(nodeStack) > 0):
        
        # Pop the top item from stack and print it
        node = nodeStack.pop()
        print (node.data, end=" ")
        
        # Push right and left children of the popped node
        # to stack
        if node.right is not None:
            nodeStack.append(node.right)
        if node.left is not None:
            nodeStack.append(node.left)
def printPreorder(node):
    if node is None:
        return

    # Deal with the node
    print(node.data, end=' ')

    # Recur on left subtree
    printPreorder(node.left)

    # Recur on right subtree
    printPreorder(node.right)
    
def printPostorder(node):
    if node == None:
        return
 
    # First recur on left subtree
    printPostorder(node.left)
 
    # Then recur on right subtree
    printPostorder(node.right)
 
    # Now deal with the node
    print(node.data, end=' ')
def peek(stack): 
    if len(stack) > 0: 
        return stack[-1] 
    return None
# A iterative function to do postorder traversal of 
# a given binary tree 
def postOrderIterative(root): 
        
    # Check for empty tree 
    if root is None: 
        return

    stack = [] 
    
    while(True): 
        
        while (root): 
            # Push root's right child and then root to stack 
            if root.right is not None: 
                stack.append(root.right) 
            stack.append(root) 

            # Set root as root's left child 
            root = root.left 
        
        # Pop an item from stack and set it as root 
        root = stack.pop() 

        # If the popped item has a right child and the 
        # right child is not processed yet, then make sure 
        # right child is processed before root 
        if (root.right is not None and
            peek(stack) == root.right): 
            stack.pop() # Remove right child from stack 
            stack.append(root) # Push root back to stack 
            root = root.right # change root so that the 
                            # right childis processed next 

        # Else print root's data and set root as None 
        else: 
            ans.append(root.data) 
            root = None

        if (len(stack) <= 0): 
                break

# Driver code
if __name__ == '__main__':
	root = Node(1)
	root.left = Node(2)
	root.right = Node(3)
	root.left.left = Node(4)
	root.left.right = Node(5)
	root.right.right = Node(6)

	# Function call
	print("Inorder traversal of binary tree is:")
	printInorder(root)
	print("Inorder traversal in iterative form",end="\n")
	inOrder(root)
	print("preorder traversal recursion from",end="\n")
	printPreorder(root)
	print()
	print("Preorder traversal in iterative form",end="\n")
	preOrder(root)
	print()
	print("Postorder recursion from",end="\n")
	printPostorder(root)
	print()
	print("Postorder iterative from",end="\n")
	print()
	postOrderIterative(root)
	print(ans)
	
